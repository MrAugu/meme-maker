{"meta":{"generator":"0.0.1","format":19},"custom":{"Getting Started":{"name":"Getting Started","files":{"InstallingCanvas":{"name":"Installing Canvas","type":"md","content":"# Installing Canvas\n\nLet's start off by introducing what canvas is. In HTML, the `<canvas>` element can be used to draw images via scripting with JavaScript. The canvas that we're talking about is a Cairo backed canvas implementation for NodeJS. An example of something that can be done with canvas is this.\n\n![Canvas Command](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/canvas-example.png)\n\nHere, the bot is using canvas to edit a template and insert your avatar, and a random users avatar onto the template. So that's just an example of what Canvas can do, let's get down to installing it.\n\n## Installation Steps\n\nBased on what OS you're on, there are different steps to install the required prerequisites.\n\nOS | Command\n----- | -----\nOS X | `brew install pkg-config cairo pango libpng jpeg giflib`\nUbuntu | `sudo apt install libcairo2-dev libjpeg-dev libpango1.0-dev libgif-dev build-essential g++`\nFedora | `sudo yum install cairo cairo-devel cairomm-devel libjpeg-turbo-devel pango pango-devel pangomm pangomm-devel giflib-devel`\nSolaris | `pkgin install cairo pango pkg-config xproto renderproto kbproto xextproto`\nWindows | Instructions below\n\n## Installing on Windows\n\n### Step 1\n\nFirst, you need to run `npm install --global --production windows-build-tools` from a PowerShell or command prompt run as an administrator. This will take a little while, so be prepared to do other stuff while it installs.\n\n**>Notes:**\n\n- While the npm page tells you to install GTK and libjpeg-turbo, those aren't needed! Both canvas and canvas-constructor function perfectly fine without them, so they're really just taking up space that could be used for something else.\n\n### Step 2\n\nThe next and final step is simple.\n\nYou can either do...\n\n```bash\nnpm i canvas\n```\n\n...to install the stable version, or you could do...\n\n```bash\nnpm i Automattic/node-canvas#92b192447e9b9ae98da0f801e4e34afdd1dc1ef8\n```\n\n...to install a working commit of version 2.0.\n\nNext, to install canvas-constructor, you just need to do\n\n```bash\nnpm i canvas-constructor\n```\n\nIf you followed the guide completely, your console should look something like this, and you're good to go!\n\n![Install Screenshot](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/installation-screenshot.png)\n","path":"guides/Getting Started/InstallingCanvas.md"},"GettingStarted":{"name":"Getting Started","type":"md","content":"# Getting Started\n\nPlease check {@tutorial InstallingCanvas} for the installation. You **must** have Canvas installed and working before using this package.\n\n---\n\nHow to use it:\n\n```js\nconst { Canvas } = require('canvas-constructor');\n\nnew Canvas(300, 300)\n    .setColor('#AEFD54')\n    .addRect(5, 5, 290, 290)\n    .setColor('#FFAE23')\n    .setTextFont('28px Impact')\n    .addText('Hello World!', 130, 150)\n    .toBuffer();\n```\n\n- That will create a canvas with size of 300 pixels width, 300 pixels height.\n- Set the colour to #AEFD54\n- Draw a rectangle with the previous colour, covering all the pixels from (5, 5) to (290 + 5, 290 + 5)\n- Set the colour to #FFAE23\n- Set the font size to 28 pixels with font Impact.\n- Write the text 'Hello World!' in the position (130, 150)\n- Return a buffer.\n\n![Hello World!](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/getting-started-example-01.png)\n\nNow, let's suppose we want to add images. I'd recommend [fs-nextra](https://github.com/bdistin/fs-nextra), by BDISTIN, it requires Node.js 8.5.0 to work (it promisifies the async fs methods with `Util.promisify()`), it's a dependency-free and lightweight package that provides support for **atomic operations**.\n\n```js\nconst { Canvas } = require('canvas-constructor');\nconst fsn = require('fs-nextra');\n\nasync function createCanvas() {\n    const image = await fsn.readFile('./images/kitten.png');\n\n    return new Canvas(300, 400)\n        .addImage(image, 0, 0, 300, 400)\n        .setColor('#FFAE23')\n        .setTextFont('28px Impact')\n        .setTextAlign('center')\n        .addText('Kitten!', 150, 370)\n        .toBufferAsync();\n}\n```\n\n- That will create a canvas with size of 300 pixels width, 400 pixels height.\n- Draw an image, given a Buffer (the image from the images folder).\n- Set the colour to #FFAE23\n- Set the font size to 28 pixels with font Impact.\n- Set the text alignment to center.\n- Write the text 'Kitten!' in the position (150, 370)\n- Return a buffer.\n\n![Kitten!](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/getting-started-example-02.png)\n\nAnd now, you have created an image with a kitten in the background and some centered text in the bottom of it.\n\nIf you experience issues with **Canvas** or want to install it, please refer to the [canvas](https://www.npmjs.com/package/canvas) repository, if you feel you found an issue in this package, feel free to file an issue [here](https://github.com/kyranet/canvasConstructor/issues), or make a [Pull Request](https://help.github.com/articles/about-pull-requests/) if you have the fix.\n","path":"guides/Getting Started/GettingStarted.md"}}},"Profile Card":{"name":"Profile Card","files":{"ProfileCard":{"name":"Profile Card","type":"md","content":"# Profile Card\n\n> _**NOTE:** This tutorial was originally written for_ [_An Idiot's Guide_](https://anidiots.guide)_, as it is using_ [_GuideBot_](https://github.com/AnIdiotsGuide/guidebot) _as a base. Future tutorials will have no bias towards any Discord bot libraries, the only reason it wasn't rewritten with no Discord library in mind, is due to how far the tutorial progressed._\n\nThis tutorial follows uses Evie's [Enmap-Based Points System](https://anidiots.guide/coding-guides/enmap-based-points-system) for Discord.js, so if you already have a score / currency system in your Discord bot, you will need to pass those details when you get to populating the image with text.\n\nRight, this is the image you will be creating in this guide.\n\n![Profile image](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/profile-end-result.png)\n\nOkay, now you've seen what you're going to create, I want to go over what I'll be covering in this tutorial.\n\nFirst you're going to install canvas-constructor and node-canvas 2.0, you will need the [git cli](https://git-scm.com/) for this.\n\nThen you will create the image completely using canvas-constructor, this will bulk up the command, because every element will be created.\n\nThen you will be reducing the lines of code by supplying a pre-made image, and I will then cover the topic of storing the template image in memory \\(a cache\\), as well as going over the pros and cons of each method.\n\n## Installing Canvas Constructor and Canvas\n\nAlright, before you get to the good stuff you need to install both canvas-constructor and Canvas, so open up a terminal window and type in the following.\n\n```text\nnpm i canvas-constructor Automattic/node-canvas#92b192447e9b9ae98da0f801e4e34afdd1dc1ef8\n```\n\n> _The reason for the commit hash for node-canvas, is that the most recent version of node-canvas on github at the time of writing this tutorial, breaks everything._\n\n## The basic code\n\nOnce you have both Canvas and canvas-constructor installed, you need to create the profile command, so inside the `./commands/` folder create a new file called `profile.js` and fill it with the following code and hit save.\n\n```javascript\n// eslint-disable-next-line no-unused-vars\nexports.run = async (client, message, args, level) => {\n  // Your code here.\n};\n\nexports.conf = {\n  enabled: true,\n  guildOnly: false,\n  aliases: [],\n  permLevel: \"User\"\n};\n\nexports.help = {\n  name: \"profile\",\n  category: \"economy\",\n  description: \"Display user profile.\",\n  usage: \"profile\"\n};\n```\n\n## The Requires\n\nNow, at the very top of the file, you need to require a few things such as canvas-constructor, snekfetch and Discord.js to name a few, so throw the following at the top.\n\n```javascript\nconst { Canvas } = require(\"canvas-constructor\"); // You can't make images without this.\nconst { resolve, join } = require(\"path\"); // This is to get a font file.\nconst { Attachment } = require(\"discord.js\"); // This is to send the image via discord.\nconst { get } = require(\"snekfetch\"); // This is to fetch the user avatar and convert it to a buffer.\n```\n\n> _**NOTE:**_ We're doing some fancy [Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), click the link to read more.\n\nAlright, I'll quickly cover some of the things you've required, instead of doing `const canvas = require(\"canvas-constructor\")` then `canvas.Canvas` you've deconstructed the require and pulled out `Canvas` directly, the same with `resolve`, and `join` from `path`.\n\nNext up you should create an async function below those requires you've just added, and you'll want to pass the `member` object and the `score` object, it should look something like this.\n\n```javascript\nasync function profile(member, score) {\n  // Canvas code will go here.\n}\n```\n\nWe also need to add a bit of regex \\(I'll explain why later\\), so throw this under the requires you added earlier\n\n```javascript\nconst imageUrlRegex = /\\?size=2048$/g;\n```\n\nWe've got the basics covered, we have the blank command with the requires, and the async function, we're ready to rock with the meat and potatoes of the tutorial.\n\n## Getting the points\n\nInside the `exports.run` method of the command, add the following code, I'll explain as you write it what each line does.\n\n```javascript\n  // This will check to see if the command was ran in a guild instead of a DM.\n  if (message.guild) {\n    // This creates a \"key\" for enmaps Key/Value system.\n    // We've declared it as a variable as we'll be using it in multiple places.\n    const key = `${message.guild.id}-${message.author.id}`;\n    // If the points database does not have the message author in the database...\n    if (!client.points.has(key)) {\n      // Create an entry for them...\n      client.points.set(key, {\n        // Using the predefined information below.\n        user: message.author.id, guild: message.guild.id, points: 0, level: 1\n      });\n    }\n    // We await both the message.channel.send, and the profile function.\n    // Also remember, we wanted to pass the member object, and the points object.\n    // Since we're creating a user profile, we should give it a unique file name.\n    await message.channel.send(new Attachment(await profile(message.member, client.points.get(key)), `profile-${message.author.id}.jpg`));\n  }\n```\n\n## Creating the profile\n\nAlright, now we've got the actual command sorted, all we have left is the `profile` function.\n\n> _You should go get a drink, this may take a while lol._\n\nInside your profile function you need to define a few variables, we're going do to some more fancy [Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we are passing the entire object, but we actually only need a few things, so here we go.\n\n```javascript\n// We only need the level, and points values, we don't need the user or guild id.\nconst { level, points } = score;\n// We're grabbing the body out of snekfetch's get method, but at the same time we're assigning a variable\n// to it, avatar.\n// Remember when I mentioned the regex before? Now we get to use it, we want to set the size to 128 pixels,\n// instead of 2048 pixels.\nconst { body: avatar } = await get(member.user.displayAvatarURL.replace(imageUrlRegex, \"?size=128\"));\n// The reason for the displayName length check, is we don't want the name of the user going outside\n// the box we're going to be making later, so we grab all the characters from the 0 index through\n// to the 17th index and cut the rest off, then append `...`.\nconst name = member.displayName.length > 20 ? member.displayName.substring(0, 17) + \"...\" : member.displayName;\n```\n\nOkay, from this point on, it's all canvas baby, we're going to do it chunk by chunk for ease, we'll be using the Discord colour scheme, it can be found on their [branding](https://discordapp.com/branding) page.\n\nSince this is a function, we should `return` the canvas we create so let's do just that.\n\n```javascript\nreturn new Canvas(400, 180)\n```\n\nNow, here comes the beauty of canvas-constructor's [`chainable` methods](https://schier.co/blog/2013/11/14/method-chaining-in-javascript.html).\n\n```javascript\nreturn new Canvas(400, 180)\n  // Create the Blurple rectangle on the right side of the image.\n  .setColor(\"#7289DA\")\n  .addRect(84, 0, 316, 180)\n```\n\nThat's the beauty of chanable methods, you don't need to constantly call the same thing over and over, so from this point on, everything I add will just be added onto the previous code block.\n\n```javascript\n  // Create the \"Dark, but not black\" boxes for the left side of the image\n  // and the text boxes on the right.\n  .setColor(\"#2C2F33\")\n  .addRect(0, 0, 84, 180)\n  .addRect(169, 26, 231, 46)\n  .addRect(224, 108, 176, 46)\n```\n\nIf you've been following along closely, your profile image should look like this now.\n\n![Boxes... yay](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/profile-boxes.png)\n\nAs you can see, we've managed to successfully create an image with multiple boxes of different colours, now we'll do something different, let's create a drop shadow effect on a circular clip path.\n\n```javascript\n  // Create a shadow effect for the avatar placement.\n  .setShadowColor(\"rgba(22, 22, 22, 1)\") // This is a nice colour for a shadow.\n  .setShadowOffsetY(5) // Drop the shadow by 5 pixels.\n  .setShadowBlur(10) // Blur the shadow by 10.\n  .save() // We should save the instance again.\n  // This circle is 2 pixels smaller in the radius to prevent a pixel border.\n  .addCircle(84, 90, 62)\n  // We need to put something here next.\n  // Now we restore the canvas' previous state.\n  .restore()\n```\n\nThat will create the following image:\n\n![Shadows](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/profile-shadow.png)\n\nNow, for the keen eyed observers, you may have noticed this comment line `// We need to put something here next.`, guess what you're about to put the avatar in that circle, so replace that line of text with this.\n\n```javascript\n  .addRoundImage(avatar, 20, 26, 128, 128, 64)\n```\n\nAnd boom\n\n![Now with extra avatar.](https://raw.githubusercontent.com/kyranet/canvasConstructor/master/guides/assets/profile-avatar.png)\n\nYou're on the home stretch, you've only got to create a \"level\" plate over the avatar, and then add the text, so let's get that plate sorted \\(I won't display how it looks\\).\n\n```javascript\n  // This creates a rounded corner rectangle, you must use restore to\n  // add new elements afterwards.\n  .createBeveledClip(20, 138, 128, 32, 5)\n  .setColor(\"#23272A\")\n  .addRect(20, 138, 128, 32)\n  .restore()\n```\n\nDue to using another path/clip method, we need to restore the canvas element from before otherwise you won't be able successfully add any text or other new elements, let's move on.\n\nLet's add all of the textual elements now.\n\n```javascript\n  // Add all of the text for the template.\n  // Let's center the text\n  .setTextAlign(\"center\")\n  // I'm using a custom font, which I will show you how to add next.\n  .setTextFont(\"10pt Discord\")\n  // Set the colour to white, since we have a dark background for all the text boxes.\n  .setColor(\"#FFFFFF\")\n  // Add the name variable.\n  .addText(name, 285, 54)\n  // Using template literals, you can add text and variables, we're applying the toLocaleString()\n  // to break up the number into a nice readable format.\n  .addText(`Level: ${level.toLocaleString()}`, 84, 159)\n  // Now we want to align the text to the left.\n  .setTextAlign(\"left\")\n  // Let's add all the points!\n  .addText(`Score: ${points.toLocaleString()}`, 241, 136)\n```\n\nAlright, and we're just about done, just two things left to do, you need to include a font file \\(if you're not using an OS installed font\\), this should really be done inside your initialization file, but since we don't have one we'll throw this under the requires at the very top of your file.\n\n```javascript\nCanvas.registerFont(resolve(join(__dirname, \"./path/to/font/Discord.ttf\")), \"Discord\");\n```\n\nAnd lastly, back inside the `profile()` function, throw `.toBuffer()` on the very end.\n\nCongratulations, you should have a very nice, but basic economy profile image made purely in canvas.\n\nIn part two, I will take this guide page and show you how to use a pre-made image instead of making everything on the fly...\n\nNow go create!\n","path":"guides/Profile Card/ProfileCard.md"}}}},"classes":[{"name":"CanvasConstructor","construct":{"name":"CanvasConstructor","description":"Initialize canvas-constructor","params":[{"name":"width","description":"The canvas' width in pixels.","type":[[["number"]]]},{"name":"height","description":"The canvas' height in pixels.","type":[[["number"]]]},{"name":"type","description":"The canvas type.","optional":true,"type":[[["pdf","'"]],[["svg","'"]]]}]},"props":[{"name":"canvas","description":"The constructed Canvas","access":"private","type":[[["Canvas"]]],"meta":{"line":46,"file":"canvas.js","path":"src"},"since":"0.0.1"},{"name":"context","description":"The 2D context for this canvas","access":"private","type":[[["CanvasRenderingContext2D"]]],"meta":{"line":54,"file":"canvas.js","path":"src"},"since":"0.0.1"},{"name":"width","description":"The image width of this canvas","type":[[["number"]]],"meta":{"line":62,"file":"canvas.js","path":"src"},"since":"0.0.1"},{"name":"height","description":"The image height of this canvas","type":[[["number"]]],"meta":{"line":75,"file":"canvas.js","path":"src"},"since":"0.0.1"},{"name":"lineDash","description":"A list of numbers that specifies distances to alternately draw a line and a gap (in coordinate space units).\rIf the number, when setting the elements, was odd, the elements of the array get copied and concatenated.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash"],"readonly":true,"type":[[["Array","<"],["number",">"]]],"meta":{"line":1270,"file":"canvas.js","path":"src"}}],"methods":[{"name":"changeCanvasSize","description":"Change the current canvas' size.","params":[{"name":"width","description":"The new width for the canvas.","type":[[["number"]]]},{"name":"height","description":"The new heigth for the canvas.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":90,"file":"canvas.js","path":"src"}},{"name":"changeCanvasWidth","description":"Change the current canvas' width.","params":[{"name":"width","description":"The new width for the canvas.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":106,"file":"canvas.js","path":"src"}},{"name":"changeCanvasHeigth","description":"Change the current canvas' height.","params":[{"name":"height","description":"The new height for the canvas.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":116,"file":"canvas.js","path":"src"}},{"name":"save","description":"Save the entire state of the canvas by pushing the current state onto a stack.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save"],"returns":[[["this"]]],"meta":{"line":126,"file":"canvas.js","path":"src"}},{"name":"restore","description":"Restores the most recently saved canvas by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore"],"returns":[[["this"]]],"meta":{"line":137,"file":"canvas.js","path":"src"}},{"name":"rotate","description":"Adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate"],"params":[{"name":"angle","description":"The angle to rotate clockwise in radians.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":149,"file":"canvas.js","path":"src"}},{"name":"scale","description":"Adds a scaling transformation to the canvas units by X horizontally and by y vertically.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale"],"params":[{"name":"dx","description":"Scaling factor in the horizontal direction.","type":[[["number"]]]},{"name":"dy","description":"Scaling factor in the vertical direction.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":162,"file":"canvas.js","path":"src"}},{"name":"translate","description":"Adds a translation transformation by moving the canvas and its origin X horizontally and y vertically on the grid.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate"],"params":[{"name":"dx","description":"Distance to move in the horizontal direction.","type":[[["number"]]]},{"name":"dy","description":"Distance to move in the vertical direction.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":175,"file":"canvas.js","path":"src"}},{"name":"clip","description":"Turns the path currently being built into the current clipping path.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip"],"params":[{"name":"path","description":"A Path2D path to fill.","optional":true,"type":[[["any"]]]},{"name":"fillRule","description":"The algorithm by which to determine if a point is inside a path or\routside a path.","optional":true,"type":[[["nonzero","'"]],[["evenodd","'"]]]}],"returns":[[["this"]]],"meta":{"line":189,"file":"canvas.js","path":"src"}},{"name":"setTransform","description":"Resets (overrides) the current transformation to the identity matrix and then invokes a transformation described\rby the arguments of this method.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform"],"params":[{"name":"a","description":"Horizontal scaling.","type":[[["number"]]]},{"name":"b","description":"Horizontal skewing.","type":[[["number"]]]},{"name":"c","description":"Vertical skewing.","type":[[["number"]]]},{"name":"d","description":"Vertical scaling.","type":[[["number"]]]},{"name":"e","description":"Horizontal moving.","type":[[["number"]]]},{"name":"f","description":"Vertical moving.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":207,"file":"canvas.js","path":"src"}},{"name":"resetTransformation","description":"Reset the transformation.","returns":[[["this"]]],"meta":{"line":217,"file":"canvas.js","path":"src"}},{"name":"getImageData","description":"Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy)\rand has an sw width and sh height. This method is not affected by the canvas transformation matrix.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData"],"params":[{"name":"dx","description":"The X coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.","optional":true,"default":0,"type":[[["number"]],[["function"]]]},{"name":"dy","description":"The Y coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.","optional":true,"default":0,"type":[[["number"]]]},{"name":"width","description":"The width of the rectangle from which the ImageData will be extracted.","optional":true,"type":[[["number"]]]},{"name":"height","description":"The height of the rectangle from which the ImageData will be extracted.","optional":true,"type":[[["number"]]]},{"name":"callback","description":"The callback, if not specified, this method won't be chainable as it will return a\rnumber. If you use an arrow function, you might want to use the second argument which is the instance of the\rclass. Otherwise, the keyword this is binded to the class instance itself, so you can use it safely.","type":[[["function"]]]}],"returns":[[["this"]]],"meta":{"line":235,"file":"canvas.js","path":"src"}},{"name":"putImageData","description":"The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the bitmap.\rIf a dirty rectangle is provided, only the pixels from that rectangle are painted.\rThis method is not affected by the canvas transformation matrix.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData"],"params":[{"name":"imagedata","description":"An ImageData object containing the array of pixel values.","type":[[["ImageData"]]]},{"name":"dx","description":"Horizontal position (x-coordinate) at which to place the image data in the destination canvas.","type":[[["number"]]]},{"name":"dy","description":"Vertical position (y-coordinate) at which to place the image data in the destination canvas.","type":[[["number"]]]},{"name":"dirtyX","description":"Horizontal position (x-coordinate). The X coordinate of the top left hand corner of your Image data. Defaults to 0.","optional":true,"default":0,"type":[[["number"]]]},{"name":"dirtyY","description":"Vertical position (y-coordinate). The Y coordinate of the top left hand corner of your Image data. Defaults to 0.","optional":true,"default":0,"type":[[["number"]]]},{"name":"dirtyWidth","description":"Width of the rectangle to be painted. Defaults to the width of the image data.","optional":true,"type":[[["number"]]]},{"name":"dirtyHeight","description":"Height of the rectangle to be painted. Defaults to the height of the image data.","optional":true,"type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":263,"file":"canvas.js","path":"src"}},{"name":"fill","description":"Fills the current or given path with the current fill style using the non-zero or even-odd winding rule.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill"],"params":[{"name":"path","description":"A Path2D path to fill.","optional":true,"type":[[["any"]]]},{"name":"fillRule","description":"The algorithm by which to determine if a point is inside a path or\routside a path.","optional":true,"type":[[["nonzero","'"]],[["evenodd","'"]]]}],"returns":[[["this"]]],"meta":{"line":277,"file":"canvas.js","path":"src"}},{"name":"addText","description":"Add a text.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText"],"params":[{"name":"text","description":"The text to write.","type":[[["string"]]]},{"name":"dx","description":"The position x to start drawing the element.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","type":[[["number"]]]},{"name":"maxWidth","description":"The maximum width to draw. If specified, and the string is computed to be wider than\rthis width, the font is adjusted to use a more horizontally condensed font.","optional":true,"type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":293,"file":"canvas.js","path":"src"}},{"name":"addResponsiveText","description":"Add responsive text","examples":["new Canvas(400, 300)\r    .setTextFont('40px Tahoma')\r    .addResponsiveText('Hello World', 30, 30, 50)\r    .toBuffer();"],"params":[{"name":"text","description":"The text to write.","type":[[["string"]]]},{"name":"dx","description":"The position x to start drawing the element.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","type":[[["number"]]]},{"name":"maxWidth","description":"The max length in pixels for the text.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":312,"file":"canvas.js","path":"src"}},{"name":"addMultilineText","description":"Add responsive text","examples":["new Canvas(400, 300)\r    .setTextFont('25px Tahoma')\r    .addMultilineText('This is a really long text!', 139, 360, 156, 28)\r    .toBuffer();"],"params":[{"name":"text","description":"The text to write.","type":[[["string"]]]},{"name":"dx","description":"The position x to start drawing the element.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","type":[[["number"]]]},{"name":"maxWidth","description":"The max length in pixels for the text.","type":[[["number"]]]},{"name":"lineHeight","description":"The line's height.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":337,"file":"canvas.js","path":"src"}},{"name":"stroke","description":"Strokes the current or given path with the current stroke style using the non-zero winding rule.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke"],"params":[{"name":"path","description":"A Path2D path to stroke.","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":361,"file":"canvas.js","path":"src"}},{"name":"addStrokeRect","description":"Paints a rectangle which has a starting point at (X, Y) and has a w width and an h height onto the canvas, using\rthe current stroke style.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect"],"params":[{"name":"dx","description":"The x axis of the coordinate for the rectangle starting point.","type":[[["number"]]]},{"name":"dy","description":"The y axis of the coordinate for the rectangle starting point.","type":[[["number"]]]},{"name":"width","description":"The rectangle's width.","type":[[["number"]]]},{"name":"height","description":"The rectangle's height.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":377,"file":"canvas.js","path":"src"}},{"name":"addStrokeText","description":"Add stroked text.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText"],"params":[{"name":"text","description":"The text to write.","type":[[["string"]]]},{"name":"dx","description":"The position x to start drawing the element.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":391,"file":"canvas.js","path":"src"}},{"name":"measureText","description":"Measure a text's width given a string.\rIf a callback is not passed, this method will not be chainable, and it will return an integer instead.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText"],"examples":["new Canvas(500, 400)\r    .setTextFont('40px Tahoma')\r    .measureText('Hello World!', function(size) {\r        const newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\r        this.setTextFont(`${newSize}px Tahoma`);\r    })\r    .addText('Hello World!', 30, 50)\r    .toBuffer(); // Returns a Buffer","new Canvas(500, 400)\r    .setTextFont('40px Tahoma')\r    .measureText('Hello World!', (size, inst) => {\r        const newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\r        inst.setTextFont(`${newSize}px`);\r    })\r    .addText('Hello World!', 30, 50)\r    .toBuffer(); // Returns a Buffer","const size = new Canvas(500, 400)\r    .setTextFont('40px Tahoma')\r    .measureText('Hello World!'); // Returns a number\r\rconst newSize = size.width < 500 ? 40 : (500 / size.width) * 40;\r\rnew Canvas(500, 400)\r    .setTextFont(`${newSize}px Tahoma`)\r    .addText('Hello World!', 30, 50)\r    .toBuffer(); // Returns a Buffer"],"params":[{"name":"text","description":"The text to measure.","type":[[["string"]]]},{"name":"callback","description":"The callback, if not specified, this method won't be chainable as it will return a\rnumber. If you use an arrow function, you might want to use the second argument which is the instance of the\rclass. Otherwise, the keyword this is binded to the class instance itself, so you can use it safely.","type":[[["function"]]]}],"returns":[[["CanvasConstructor"]],[["TextMetrics"]]],"meta":{"line":435,"file":"canvas.js","path":"src"}},{"name":"setTextSize","description":"Set the new font size, unlike setTextFont, this only requires the number.","params":[{"name":"size","description":"The new size to set","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":450,"file":"canvas.js","path":"src"}},{"name":"setStroke","description":"Specifies the color or style to use for the lines around shapes. The default is #000000 (black).","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle"],"params":[{"name":"color","description":"A canvas' color resolvable.","optional":true,"default":"'#000000'","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":462,"file":"canvas.js","path":"src"}},{"name":"setLineWidth","description":"Sets the thickness of lines in space units.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth"],"params":[{"name":"width","description":"A number specifying the line width in space units.","optional":true,"default":1,"type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":474,"file":"canvas.js","path":"src"}},{"name":"setLineDashOffset","description":"Sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset"],"params":[{"name":"value","description":"A float specifying the amount of the offset. Initially 0.0.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":490,"file":"canvas.js","path":"src"}},{"name":"setLineJoin","description":"Determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined\rtogether (degenerate segments with zero lengths, whose specified endpoints and control points are exactly at the\rsame position, are skipped).","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin"],"params":[{"name":"value","description":"The line join type.","type":[[["bevel","'"]],[["round","'"]],[["miter","'"]]]}],"returns":[[["this"]]],"meta":{"line":504,"file":"canvas.js","path":"src"}},{"name":"setLineCap","description":"Determines how the end points of every line are drawn. There are three possible values for this property and\rthose are: butt, round and square. By default this property is set to butt.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap"],"params":[{"name":"value","description":"The line join type.","type":[[["butt","'"]],[["round","'"]],[["square","'"]]]}],"returns":[[["this"]]],"meta":{"line":517,"file":"canvas.js","path":"src"}},{"name":"setLineDash","description":"Sets the line dash pattern used when stroking lines, using an array of values which specify alternating lengths\rof lines and gaps which describe the pattern.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash"],"params":[{"name":"segments","description":"An Array of numbers which specify distances to alternately draw a line and a gap (in\rcoordinate space units). If the number of elements in the array is odd, the elements of the array get copied and\rconcatenated. For example, [5, 15, 25] will become [5, 15, 25, 5, 15, 25]. If the array is empty, the line dash\rlist is cleared and line strokes return to being solid.","type":[[["Array","<"],["number",">"]]]}],"returns":[[["this"]]],"meta":{"line":533,"file":"canvas.js","path":"src"}},{"name":"addImage","description":"Add an image.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage"],"params":[{"name":"imageOrBuffer","description":"The image's buffer.","type":[[["Image"]],[["Buffer"]]]},{"name":"dx","description":"The X coordinate in the destination canvas at which to place the top-left corner of the source image.","type":[[["number"]]]},{"name":"dy","description":"The Y coordinate in the destination canvas at which to place the top-left corner of the source image.","type":[[["number"]]]},{"name":"dWidth","description":"The width to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.","optional":true,"type":[[["number"]]]},{"name":"dHeight","description":"The height to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.","optional":true,"type":[[["number"]]]},{"name":"sx","description":"The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.","optional":true,"type":[[["number"]]]},{"name":"sy","description":"The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.","optional":true,"type":[[["number"]]]},{"name":"sWidth","description":"The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by sx and sy to the bottom-right corner of the image is used.","optional":true,"type":[[["number"]]]},{"name":"sHeight","description":"The height of the sub-rectangle of the source image to draw into the destination context.","optional":true,"type":[[["number"]]]},{"name":"options","description":"Options.","optional":true,"type":[[["Object"]]]},{"name":"options.radius","description":"The radius for the new image.","optional":true,"type":[[["number"]]]},{"name":"options.type","description":"The type for the new image.","optional":true,"type":[[["round","'"]],[["bevel","'"]]]},{"name":"options.restore","description":"Whether this method should restore the drawing state. Use this when you use options.type","optional":true,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":557,"file":"canvas.js","path":"src"}},{"name":"addRoundImage","description":"Add a round image.","params":[{"name":"imageOrBuffer","description":"The image's buffer.","type":[[["Image"]],[["Buffer"]]]},{"name":"dx","description":"The X coordinate in the destination canvas at which to place the top-left corner of the source image.","type":[[["number"]]]},{"name":"dy","description":"The Y coordinate in the destination canvas at which to place the top-left corner of the source image.","type":[[["number"]]]},{"name":"dWidth","description":"The width to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.","type":[[["number"]]]},{"name":"dHeight","description":"The height to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn.","type":[[["number"]]]},{"name":"radius","description":"The radius for the circle","optional":true,"type":[[["number"]]]},{"name":"restore","description":"Whether this method should restore the drawing state.","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":584,"file":"canvas.js","path":"src"}},{"name":"addCircularImage","description":"Add a circular image, as opposed to addRoundImage, this method does not set dx and dy in the top left corner of the image. Instead, they're positioned in the center, works similarly to `addCircle`.","params":[{"name":"imageOrBuffer","description":"The image's buffer.","type":[[["Image"]],[["Buffer"]]]},{"name":"dx","description":"The X coordinate in the destination canvas at which to place the center of the image.","type":[[["number"]]]},{"name":"dy","description":"The Y coordinate in the destination canvas at which to place the center of the image.","type":[[["number"]]]},{"name":"radius","description":"The radius for the circle, it sets the image's width and heigth as the diameter (radius * 2).","type":[[["number"]]]},{"name":"restore","description":"Whether this method should restore the drawing state.","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":600,"file":"canvas.js","path":"src"}},{"name":"addBeveledImage","description":"Add a beveled image.","params":[{"name":"imageOrBuffer","description":"The image's buffer.","type":[[["Image"]],[["Buffer"]]]},{"name":"dx","description":"The position x to start drawing the element.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","type":[[["number"]]]},{"name":"width","description":"The width of the element.","type":[[["number"]]]},{"name":"height","description":"The heigth of the element.","type":[[["number"]]]},{"name":"radius","description":"The radius for the new image.","optional":true,"default":10,"type":[[["number"]]]},{"name":"restore","description":"Whether this method should restore the drawing state.","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":621,"file":"canvas.js","path":"src"}},{"name":"addCircle","description":"Add a circle or semi circle.","params":[{"name":"dx","description":"The position x in the center of the circle.","type":[[["number"]]]},{"name":"dy","description":"The position y in the center of the ircle.","type":[[["number"]]]},{"name":"radius","description":"The radius for the clip.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":633,"file":"canvas.js","path":"src"}},{"name":"addRect","description":"Add a rectangle.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect"],"params":[{"name":"dx","description":"The position x to start drawing the element.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","type":[[["number"]]]},{"name":"width","description":"The width of the element.","type":[[["number"]]]},{"name":"height","description":"The heigth of the element.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":647,"file":"canvas.js","path":"src"}},{"name":"addBeveledRect","description":"Add a beveled rectangle.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect"],"params":[{"name":"dx","description":"The position x to start drawing the element.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","type":[[["number"]]]},{"name":"width","description":"The width of the element.","type":[[["number"]]]},{"name":"height","description":"The heigth of the element.","type":[[["number"]]]},{"name":"radius","description":"The radius for the bevels.","optional":true,"default":10,"type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":663,"file":"canvas.js","path":"src"}},{"name":"createRoundPath","description":"Create a round path.","params":[{"name":"dx","description":"The position x in the center of the clip's circle.","type":[[["number"]]]},{"name":"dy","description":"The position y in the center of the clip's circle.","type":[[["number"]]]},{"name":"radius","description":"The radius for the clip.","type":[[["number"]]]},{"name":"start","description":"The degree in radians to start drawing the circle.","optional":true,"default":0,"type":[[["number"]]]},{"name":"angle","description":"The degree in radians to finish drawing the circle, defaults to a full circle.","optional":true,"default":"Math.PI * 2","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":677,"file":"canvas.js","path":"src"}},{"name":"createRoundClip","description":"Create a round clip.","params":[{"name":"dx","description":"The position x in the center of the clip's circle.","type":[[["number"]]]},{"name":"dy","description":"The position y in the center of the clip's circle.","type":[[["number"]]]},{"name":"radius","description":"The radius for the clip.","type":[[["number"]]]},{"name":"start","description":"The degree in radians to start drawing the circle.","optional":true,"default":0,"type":[[["number"]]]},{"name":"angle","description":"The degree in radians to finish drawing the circle, defaults to a full circle.","optional":true,"default":"Math.PI * 2","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":693,"file":"canvas.js","path":"src"}},{"name":"createRectPath","description":"Create a rectangle path.","params":[{"name":"dx","description":"The position x in the left corner.","type":[[["number"]]]},{"name":"dy","description":"The position y in the upper corner.","type":[[["number"]]]},{"name":"width","description":"The width of the rectangle.","type":[[["number"]]]},{"name":"height","description":"The height of the rectangle.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":706,"file":"canvas.js","path":"src"}},{"name":"createRectClip","description":"Create a rectangle clip.","params":[{"name":"dx","description":"The position x in the left corner.","type":[[["number"]]]},{"name":"dy","description":"The position y in the upper corner.","type":[[["number"]]]},{"name":"width","description":"The width of the rectangle.","type":[[["number"]]]},{"name":"height","description":"The height of the rectangle.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":720,"file":"canvas.js","path":"src"}},{"name":"createBeveledPath","description":"Create a beveled path.","params":[{"name":"dx","description":"The position x to start drawing clip.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing clip.","type":[[["number"]]]},{"name":"width","description":"The width of clip.","type":[[["number"]]]},{"name":"height","description":"The heigth of clip.","type":[[["number"]]]},{"name":"radius","description":"The radius for clip's rounded borders.","default":10,"type":[[["BeveledRadiusOptions"]],[["number"]]]}],"returns":[[["this"]]],"meta":{"line":734,"file":"canvas.js","path":"src"}},{"name":"createBeveledClip","description":"Create a beveled clip.","params":[{"name":"dx","description":"The position x to start drawing clip.","type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing clip.","type":[[["number"]]]},{"name":"width","description":"The width of clip.","type":[[["number"]]]},{"name":"height","description":"The heigth of clip.","type":[[["number"]]]},{"name":"radius","description":"The radius for clip's rounded borders.","optional":true,"type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":771,"file":"canvas.js","path":"src"}},{"name":"setColor","description":"Set a color for the canvas' context.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle"],"params":[{"name":"color","description":"A canvas' color resolvable.","type":[[["string"]],[["CanvasGradient"]]]}],"returns":[[["this"]]],"meta":{"line":782,"file":"canvas.js","path":"src"}},{"name":"setTextFont","description":"Change the font.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font"],"params":[{"name":"font","description":"The font's name to set.","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":794,"file":"canvas.js","path":"src"}},{"name":"setTextAlign","description":"Change the font alignment.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign"],"params":[{"name":"align","description":"The font's alignment to set.","type":[[["left","'"]],[["center","'"]],[["right","'"]],[["start","'"]],[["end","'"]]]}],"returns":[[["this"]]],"meta":{"line":806,"file":"canvas.js","path":"src"}},{"name":"setTextBaseline","description":"Change the font's baseline.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline"],"params":[{"name":"baseline","description":"The font's baseline to set.","type":[[["top","'"]],[["hanging","'"]],[["middle","'"]],[["alphabetic","'"]],[["ideographic","'"]],[["bottom","'"]]]}],"returns":[[["this"]]],"meta":{"line":818,"file":"canvas.js","path":"src"}},{"name":"beginPath","description":"Starts a new path by emptying the list of sub-paths.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath"],"returns":[[["this"]]],"meta":{"line":829,"file":"canvas.js","path":"src"}},{"name":"closePath","description":"Causes the point of the pen to move back to the start of the current sub-path.\rIf the shape has already been closed or has only one point, this function does nothing.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath"],"returns":[[["this"]]],"meta":{"line":841,"file":"canvas.js","path":"src"}},{"name":"createPattern","description":"Creates a pattern using the specified image. It repeats the source in the directions specified by the repetition\rargument.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern"],"params":[{"name":"imageOrBuffer","description":"A Canvas Image to be used as the image to repeat.","type":[[["Image"]],[["Buffer"]]]},{"name":"repetition","description":"The repeat mode.","type":[[["repeat","'"]],[["repeat","-"],["x","'"]],[["repeat","-"],["y","'"]],[["no","-"],["repeat","'"]]]},{"name":"callback","description":"The callback to take the createPattern","type":[[["function"]]]}],"returns":[[["this"]]],"meta":{"line":856,"file":"canvas.js","path":"src"}},{"name":"printPattern","description":"Creates a pattern using the specified image. It repeats the source in the directions specified by the repetition\rargument, and prints it.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern"],"params":[{"name":"imageOrBuffer","description":"A Canvas Image to be used as the image to repeat.","type":[[["Image"]],[["Buffer"]]]},{"name":"repetition","description":"The repeat mode.","type":[[["repeat","'"]],[["repeat","-"],["x","'"]],[["repeat","-"],["y","'"]],[["no","-"],["repeat","'"]]]}],"returns":[[["this"]]],"meta":{"line":870,"file":"canvas.js","path":"src"}},{"name":"createLinearGradient","description":"Creates a gradient along the line given by the coordinates represented by the parameters.\rThe coordinates are global, the second point does not rely on the position of the first and vice versa.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient"],"params":[{"name":"x0","description":"The x axis of the coordinate of the start point.","type":[[["number"]]]},{"name":"y0","description":"The y axis of the coordinate of the start point.","type":[[["number"]]]},{"name":"x1","description":"The x axis of the coordinate of the end point.","type":[[["number"]]]},{"name":"y1","description":"The y axis of the coordinate of the end point.","type":[[["number"]]]},{"name":"steps","description":"The steps.","optional":true,"default":"[]","type":[[["Array","<"],["GradientStep",">"]]]}],"returns":[[["CanvasGradient"]]],"meta":{"line":885,"file":"canvas.js","path":"src"}},{"name":"printLinearGradient","description":"Creates a gradient along the line given by the coordinates represented by the parameters.\rThe coordinates are global, the second point does not rely on the position of the first and vice versa. This\rmethod is chainable and calls setColor after creating the gradient.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient"],"examples":["new Canvas(200, 200)\r    .printLinearGradient(0, 0, 200, 50, [\r        { position: 0, color: 'white' },\r        { position: 0.25, color: 'red' },\r        { position: 0.5, color: 'blue' }\r    ])\r    .addRect(10, 10, 200, 100)"],"params":[{"name":"x0","description":"The x axis of the coordinate of the start point.","type":[[["number"]]]},{"name":"y0","description":"The y axis of the coordinate of the start point.","type":[[["number"]]]},{"name":"x1","description":"The x axis of the coordinate of the end point.","type":[[["number"]]]},{"name":"y1","description":"The y axis of the coordinate of the end point.","type":[[["number"]]]},{"name":"steps","description":"The steps.","optional":true,"default":"[]","type":[[["Array","<"],["GradientStep",">"]]]}],"returns":[[["this"]]],"meta":{"line":914,"file":"canvas.js","path":"src"}},{"name":"createRadialGradient","description":"Creates a radial gradient given by the coordinates of the two circles represented by the parameters.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient"],"params":[{"name":"x0","description":"The x axis of the coordinate of the start circle.","type":[[["number"]]]},{"name":"y0","description":"The y axis of the coordinate of the start circle.","type":[[["number"]]]},{"name":"r0","description":"The radius of the start circle.","type":[[["number"]]]},{"name":"x1","description":"The x axis of the coordinate of the end circle.","type":[[["number"]]]},{"name":"y1","description":"The y axis of the coordinate of the end circle.","type":[[["number"]]]},{"name":"r1","description":"The radius of the end circle.","type":[[["number"]]]},{"name":"steps","description":"The steps.","optional":true,"default":"[]","type":[[["Array","<"],["GradientStep",">"]]]}],"returns":[[["CanvasGradient"]]],"meta":{"line":931,"file":"canvas.js","path":"src"}},{"name":"printRadialGradient","description":"Creates a radial gradient given by the coordinates of the two circles represented by the parameters. This\rmethod is chainable and calls setColor after creating the gradient.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient"],"params":[{"name":"x0","description":"The x axis of the coordinate of the start circle.","type":[[["number"]]]},{"name":"y0","description":"The y axis of the coordinate of the start circle.","type":[[["number"]]]},{"name":"r0","description":"The radius of the start circle.","type":[[["number"]]]},{"name":"x1","description":"The x axis of the coordinate of the end circle.","type":[[["number"]]]},{"name":"y1","description":"The y axis of the coordinate of the end circle.","type":[[["number"]]]},{"name":"r1","description":"The radius of the end circle.","type":[[["number"]]]},{"name":"steps","description":"The steps.","type":[[["Array","<"],["GradientStep",">"]]]}],"returns":[[["this"]]],"meta":{"line":953,"file":"canvas.js","path":"src"}},{"name":"createEllipse","description":"Adds an ellipse to the path which is centered at (X, Y) position with the radius radiusX and radiusY starting at\rstartAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse"],"params":[{"name":"dx","description":"The x axis of the coordinate for the ellipse's center.","type":[[["number"]]]},{"name":"dy","description":"The y axis of the coordinate for the ellipse's center.","type":[[["number"]]]},{"name":"radiusX","description":"The ellipse's major-axis radius.","type":[[["number"]]]},{"name":"radiusY","description":"The ellipse's minor-axis radius.","type":[[["number"]]]},{"name":"rotation","description":"The rotation for this ellipse, expressed in radians.","optional":true,"default":0,"type":[[["number"]]]},{"name":"startAngle","description":"The starting point, measured from the x axis, from which it will be drawn, expressed\rin radians.","optional":true,"default":0,"type":[[["number"]]]},{"name":"endAngle","description":"The end ellipse's angle to which it will be drawn, expressed in radians.","optional":true,"default":"Math.PI * 2","type":[[["number"]]]},{"name":"anticlockwise","description":"An optional Boolean which, if true, draws the ellipse anticlockwise\r(counter-clockwise), otherwise in a clockwise direction.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":975,"file":"canvas.js","path":"src"}},{"name":"arc","description":"Adds an arc to the path which is centered at (X, Y) position with radius r starting at startAngle and ending at\rendAngle going in the given direction by anticlockwise (defaulting to clockwise).","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc"],"params":[{"name":"dx","description":"The X coordinate of the arc's center.","type":[[["number"]]]},{"name":"dy","description":"The Y coordinate of the arc's center.","type":[[["number"]]]},{"name":"radius","description":"The arc's radius.","type":[[["number"]]]},{"name":"startAngle","description":"The angle at which the arc starts, measured clockwise from the positive x axis and\rexpressed in radians.","optional":true,"default":0,"type":[[["number"]]]},{"name":"endAngle","description":"The angle at which the arc ends, measured clockwise from the positive x axis and\rexpressed in radians.","optional":true,"default":"Math.PI * 2","type":[[["number"]]]},{"name":"anticlockwise","description":"An optional Boolean which, if true, causes the arc to be drawn\rcounter-clockwise between the two angles. By default it is drawn clockwise.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":996,"file":"canvas.js","path":"src"}},{"name":"arcTo","description":"Adds an arc to the path with the given control points and radius, connected to the previous point by a straight line.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo"],"params":[{"name":"x1","description":"The x axis of the coordinate for the first control point.","type":[[["number"]]]},{"name":"y1","description":"The y axis of the coordinate for the first control point.","type":[[["number"]]]},{"name":"x2","description":"The x axis of the coordinate for the second control point.","type":[[["number"]]]},{"name":"y2","description":"The y axis of the coordinate for the second control point.","type":[[["number"]]]},{"name":"radius","description":"The arc's radius.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1012,"file":"canvas.js","path":"src"}},{"name":"quadraticCurveTo","description":"Adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the\rsecond one is the end point. The starting point is the last point in the current path, which can be changed using\rmoveTo() before creating the quadratic Bézier curve.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo"],"params":[{"name":"cpx","description":"The x axis of the coordinate for the control point.","type":[[["number"]]]},{"name":"cpy","description":"The y axis of the coordinate for the control point.","type":[[["number"]]]},{"name":"dx","description":"The x axis of the coordinate for the end point.","type":[[["number"]]]},{"name":"dy","description":"The y axis of the coordinate for the end point.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1029,"file":"canvas.js","path":"src"}},{"name":"bezierCurveTo","description":"Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the\rthird one is the end point. The starting point is the last point in the current path, which can be changed using\rmoveTo() before creating the Bézier curve.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo"],"params":[{"name":"cp1x","description":"The x axis of the coordinate for the first control point.","type":[[["number"]]]},{"name":"cp1y","description":"The y axis of the coordinate for first control point.","type":[[["number"]]]},{"name":"cp2x","description":"The x axis of the coordinate for the second control point.","type":[[["number"]]]},{"name":"cp2y","description":"The y axis of the coordinate for the second control point.","type":[[["number"]]]},{"name":"dx","description":"The x axis of the coordinate for the end point.","type":[[["number"]]]},{"name":"dy","description":"The y axis of the coordinate for the end point.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1048,"file":"canvas.js","path":"src"}},{"name":"lineTo","description":"Connects the last point in the sub-path to the x, y coordinates with a straight line","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo"],"params":[{"name":"dx","description":"The x axis of the coordinate for the end of the line.","type":[[["number"]]]},{"name":"dy","description":"The y axis of the coordinate for the end of the line.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1061,"file":"canvas.js","path":"src"}},{"name":"moveTo","description":"Moves the starting point of a new sub-path to the (X, Y) coordinates.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo"],"params":[{"name":"dx","description":"The x axis of the point.","type":[[["number"]]]},{"name":"dy","description":"The y axis of the point.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1074,"file":"canvas.js","path":"src"}},{"name":"setShadowBlur","description":"Set the shadow's blur.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur"],"params":[{"name":"radius","description":"The shadow's blur radius to set.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1086,"file":"canvas.js","path":"src"}},{"name":"setShadowColor","description":"Set the shadow's color.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor"],"params":[{"name":"color","description":"A canvas' color resolvable to set as shadow's color.","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":1098,"file":"canvas.js","path":"src"}},{"name":"setShadowOffsetX","description":"Set the property that specifies the distance that the shadow will be offset in horizontal distance.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX"],"params":[{"name":"value","description":"The value in pixels for the distance.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1110,"file":"canvas.js","path":"src"}},{"name":"setShadowOffsetY","description":"Set the property that specifies the distance that the shadow will be offset in vertical distance.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY"],"params":[{"name":"value","description":"The value in pixels for the distance.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1122,"file":"canvas.js","path":"src"}},{"name":"setMiterLimit","description":"Sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default). When\rsetting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit"],"params":[{"name":"value","description":"A number specifying the miter limit ratio in space units. Zero, negative, Infinity and NaN\rvalues are ignored.","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1136,"file":"canvas.js","path":"src"}},{"name":"setPatternQuality","description":"Change the pattern quality","params":[{"name":"pattern","description":"The pattern quality.","type":[[["fast","'"]],[["good","'"]],[["best","'"]],[["nearest","'"]],[["bilinear","'"]]]}],"returns":[[["this"]]],"meta":{"line":1147,"file":"canvas.js","path":"src"}},{"name":"setTextDrawingMode","description":"Set the text drawing mode. Using glyph is much faster than path for drawing, and when using a PDF context will\rembed the text natively, so will be selectable and lower filesize. The downside is that cairo does not have any\rsubpixel precision for glyph, so this will be noticeably lower quality for text positioning in cases such as\rrotated text. Also, strokeText in glyph will act the same as fillText, except using the stroke style for the fill.","params":[{"name":"mode","description":"The drawing mode.","type":[[["path","'"]],[["glyph","'"]]]}],"returns":[[["this"]]],"meta":{"line":1161,"file":"canvas.js","path":"src"}},{"name":"setAntialiasing","description":"Set anti-aliasing mode.","params":[{"name":"antialias","description":"The antialias mode.","type":[[["default","'"]],[["none","'"]],[["gray","'"]],[["subpixel","'"]]]}],"returns":[[["this"]]],"meta":{"line":1172,"file":"canvas.js","path":"src"}},{"name":"setGlobalCompositeOperation","description":"Sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which\rof the compositing or blending mode operations to use.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation"],"params":[{"name":"type","description":"The global composite operation mode.","type":[[["source","-"],["over","'"]],[["source","-"],["in","'"]],[["source","-"],["out","'"]],[["source","-"],["atop","'"]],[["destination","-"],["over","'"]],[["destination","-"],["in","'"]],[["destination","-"],["out","'"]],[["destination","-"],["atop","'"]],[["lighter","'"]],[["copy","'"]],[["xor","'"]],[["darken","'"]],[["lighten","'"]],[["color","-"],["dodge","'"]],[["color","-"],["burn","'"]],[["difference","'"]],[["exclusion","'"]],[["hue","'"]],[["saturation","'"]],[["color","'"]],[["luminosity","'"]],[["multiply","'"]],[["screen","'"]],[["overlay","'"]],[["hard","-"],["light","'"]],[["soft","-"],["light","'"]],[["hsl","-"],["hue","'"]],[["hsl","-"],["saturation","'"]],[["hsl","-"],["color","'"]],[["hsl","-"],["luminosity","'"]]]}],"returns":[[["this"]]],"meta":{"line":1185,"file":"canvas.js","path":"src"}},{"name":"setGlobalAlpha","description":"Modify the alpha value that is applied to shapes and images before they are drawn into the canvas.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha"],"params":[{"name":"value","description":"The alpha value, from 0.0 (fully transparent) to 1.0 (fully opaque)","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1197,"file":"canvas.js","path":"src"}},{"name":"resetShadows","description":"Reset the canvas' shadows.","returns":[[["this"]]],"meta":{"line":1207,"file":"canvas.js","path":"src"}},{"name":"clearCircle","description":"Clear a circle.","params":[{"name":"dx","description":"The position x in the center of the clip's circle.","type":[[["number"]]]},{"name":"dy","description":"The position y in the center of the clip's circle.","type":[[["number"]]]},{"name":"radius","description":"The radius for the clip.","type":[[["number"]]]},{"name":"start","description":"The degree in radians to start drawing the circle.","optional":true,"default":0,"type":[[["number"]]]},{"name":"angle","description":"The degree in radians to finish drawing the circle, defaults to a full circle.","optional":true,"default":"Math.PI * 2","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1223,"file":"canvas.js","path":"src"}},{"name":"clearPixels","description":"Clear an area.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect"],"params":[{"name":"dx","description":"The position x to start drawing the element.","optional":true,"default":0,"type":[[["number"]]]},{"name":"dy","description":"The position y to start drawing the element.","optional":true,"default":0,"type":[[["number"]]]},{"name":"width","description":"The width of the element.","optional":true,"default":"this.width","type":[[["number"]]]},{"name":"height","description":"The heigth of the element.","optional":true,"default":"this.heigth","type":[[["number"]]]}],"returns":[[["this"]]],"meta":{"line":1239,"file":"canvas.js","path":"src"}},{"name":"getLineDash","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash"],"examples":["new Canvas(400, 300)\r    .beginPath()\r    .setLineDash([5, 15])\r    .moveTo(0, 50)\r    .lineTo(400, 50)\r    .stroke()\r    .toBuffer();"],"returns":{"types":[[["Array","<"],["number",">"]]],"description":"An Array. A list of numbers that specifies distances to alternately draw a line and a gap (in\rcoordinate space units). If the number, when setting the elements, was odd, the elements of the array get copied\rand concatenated. For example, setting the line dash to [5, 15, 25] will result in getting back [5, 15, 25, 5, 15,\r25]."},"meta":{"line":1259,"file":"canvas.js","path":"src"}},{"name":"isPointInPath","description":"Reports whether or not the specified point is contained in the current path.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath"],"params":[{"name":"dx","description":"The X coordinate of the point to check.","type":[[["number"]]]},{"name":"dy","description":"The Y coordinate of the point to check.","type":[[["number"]]]},{"name":"fillRule","description":"The algorithm by which to determine if a point is inside a path or\routside a path.","type":[[["nonzero","'"]],[["evenodd","'"]]]}],"returns":[[["boolean"]]],"meta":{"line":1283,"file":"canvas.js","path":"src"}},{"name":"isPointInStroke","description":"Reports whether or not the specified point is inside the area contained by the stroking of a path.","see":["https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke"],"params":[{"name":"dx","description":"The X coordinate of the point to check.","type":[[["number"]]]},{"name":"dy","description":"The Y coordinate of the point to check.","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":1294,"file":"canvas.js","path":"src"}},{"name":"process","description":"Process data with this as the context","params":[{"name":"fn","description":"A callback function","type":[[["function"]]]},{"name":"args","description":"Extra arguments to pass to the function","optional":true,"variable":true,"type":[["*"]]}],"returns":[[["this"]]],"meta":{"line":1304,"file":"canvas.js","path":"src"}},{"name":"addTextFont","description":"Register a new font (Canvas 1.6.x).","params":[{"name":"path","description":"The path for the font.","type":[[["string"]]]},{"name":"family","description":"The font's family name.","type":[[["string"]]]}],"returns":[[["this"]]],"meta":{"line":1316,"file":"canvas.js","path":"src"}},{"name":"toBuffer","description":"Render the canvas into a buffer.","params":[{"name":"args","description":"The render's options.","variable":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["Buffer"]]],"meta":{"line":1327,"file":"canvas.js","path":"src"}},{"name":"toBufferAsync","description":"Render the canvas into a buffer using a Promise.","returns":[[["Promise","<"],["Buffer",">"]]],"meta":{"line":1335,"file":"canvas.js","path":"src"}},{"name":"toDataURL","description":"Render the canvas into a Data URL.","see":["https://github.com/Automattic/node-canvas#canvastodataurl-sync-and-async"],"params":[{"name":"type","description":"the standard MIME type for the image format to return. If you do not specify this parameter, the default value is PNG.","type":[[["string"]]]},{"name":"args","description":"Extra arguments","variable":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["string"]]],"meta":{"line":1349,"file":"canvas.js","path":"src"}},{"name":"toDataURLAsync","description":"Render the canvas into a Data URL using a Promise.","params":[{"name":"type","description":"the standard MIME type for the image format to return. If you do not specify this parameter, the default value is PNG.","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":1358,"file":"canvas.js","path":"src"}},{"name":"_resolveImage","description":"Resolves an Image or Buffer","access":"private","params":[{"name":"imageOrBuffer","description":"An Image instance or a buffer","type":[[["Image"]],[["Buffer"]]]},{"name":"cb","description":"The callback","type":[[["function"]]]}],"returns":[[["Image"]]],"meta":{"line":1372,"file":"canvas.js","path":"src"}},{"name":"fromCanvas","description":"Create a canvas from an HTMLCanvasElement or NodeCanvas instance","scope":"static","examples":["// Node.js\rconst canvasInstance = Canvas.createCanvas(200, 200);\rconst buffer = CanvasConstructor.fromCanvas(canvasElement)\r    .setColor('green')\r    .addRect(10, 10, 100, 100)\r    .toBuffer();","// Browsers\r<script>\rconst canvasElement = document.getElementById('canvas');\rCanvasConstructor.fromCanvas(canvasElement)\r    .setColor('green')\r    .addRect(10, 10, 100, 100);\r</script>"],"params":[{"name":"canvas","description":"The canvas element","type":[[["HTMLCanvasElement"]]]}],"meta":{"line":1405,"file":"canvas.js","path":"src"},"since":"2.1.0"},{"name":"registerFont","description":"<warning>registerFont is not supported in node-canvas 1.6.x, you will need to use node-canvas 2.x</warning>\rRegister a new font (Canvas 2.x).","scope":"static","params":[{"name":"path","description":"The path for the font.","type":[[["string"]]]},{"name":"family","description":"The font's family name.","type":[[["string"]]]}],"returns":[[["CanvasConstructor"]]],"meta":{"line":1422,"file":"canvas.js","path":"src"}}],"meta":{"line":39,"file":"canvas.js","path":"src"}}],"typedefs":[{"name":"BeveledRadiusOptions","type":[[["Object"]]],"props":[{"name":"tl","description":"The top left radius","optional":true,"type":[[["number"]]]},{"name":"tr","description":"The top right radius","optional":true,"type":[[["number"]]]},{"name":"br","description":"The bottom right radius","optional":true,"type":[[["number"]]]},{"name":"bl","description":"The buttom left radius","optional":true,"type":[[["number"]]]}],"meta":{"line":25,"file":"canvas.js","path":"src"}}],"externals":[]}